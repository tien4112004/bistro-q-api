// <auto-generated />
using System;
using BistroQ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BistroQ.Infrastructure.Migrations
{
    [DbContext(typeof(BistroQContext))]
    [Migration("20241222091506_SeedNutritionFact")]
    partial class SeedNutritionFact
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BistroQ.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ba75fbc-33a9-4ae5-a929-6f30af4bd953",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsFS0mHIYMuI94Ty/a6p1ObHL340BrMrkrqXpT8WSkH8S59Fy1CMLQ6OlVm+YvaSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "962b2751-2da4-494b-830c-48027552e73c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffd8cc09-ad7b-422b-b3c1-d3f767a4cd33",
                            Email = "kitchen@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KITCHEN@GMAIL.COM",
                            NormalizedUserName = "KITCHEN",
                            PasswordHash = "AQAAAAIAAYagAAAAENxg3jNCLxY49Sj+4ReX9+WurvuOC1xIfot4+kwYd0ztN2fVvnDqSbi8IwNcVWi/SQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28ccb8db-1ad3-4ef4-a031-6c343429c8fd",
                            TwoFactorEnabled = false,
                            UserName = "kitchen"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9618f5b3-83c9-4d0f-a180-c00d4a05208f",
                            Email = "cashier@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CASHIER@GMAIL.COM",
                            NormalizedUserName = "CASHIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEIjk5M1ZqwaJVoNz430iwbv0PXDsfnsFDrUpMR2keCnJugIY0Dr5pGvGTAWGCUQ+cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd86f805-ac9d-4c20-8891-bf55ab097e00",
                            TwoFactorEnabled = false,
                            UserName = "cashier"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef4b6038-c9e2-4351-a2d6-a743e04637d2",
                            Email = "client1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHdHY+yqi6ST22z4z6Uz31So9tUojg3ZON0bnbsjlr88EsC1T+eZlBv2RCZh82Omg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3e260b1-41b6-4115-8840-3deb9ccb971a",
                            TableId = 1,
                            TwoFactorEnabled = false,
                            UserName = "client1"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da8bd9eb-2a11-4814-b8b4-04c2a6147958",
                            Email = "client2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIp4VR9yNb8gsDjD5/FJkNJtCXxkWijQwX6RPP1VI297DS0+p0Z3xr0RArgPWHah+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b5463dd-cbff-4a11-bdbb-769ecfdf480e",
                            TableId = 2,
                            TwoFactorEnabled = false,
                            UserName = "client2"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c064c8b3-a89d-495b-a5e0-9d52927a14d3",
                            Email = "client3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@GMAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAENiehM6RiUX3qA/P6AuCr3k7S+r/HKe81LlVsfzYDCF5q47K48xyt92G+frpqWOw0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28d1d99b-1143-4ec1-8dd4-56dd1571dce1",
                            TableId = 3,
                            TwoFactorEnabled = false,
                            UserName = "client3"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bfdc420-7a41-415d-89e1-25e369767f01",
                            Email = "client4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT4@GMAIL.COM",
                            NormalizedUserName = "CLIENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAEJdgIm8cm3aw/U7Z6mzQ1WQUHJKLzwEitpWdDmUvhG2WViTtwjYn9JlTDHFYInNwVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bad69526-59c4-4c21-a482-9ec0230ceb9b",
                            TableId = 4,
                            TwoFactorEnabled = false,
                            UserName = "client4"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d677b81-895f-41c6-a76b-19b5af03cebd",
                            Email = "client5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT5@GMAIL.COM",
                            NormalizedUserName = "CLIENT5",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+cbijuia2znd8zB6LliweasrDWxz//ss1VYAhwf98LfgnwzvsHEin+y2wIjJxajA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b855ae05-83be-4e86-b5cb-da134638b4c5",
                            TableId = 5,
                            TwoFactorEnabled = false,
                            UserName = "client5"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fad78ef7-937c-4659-9c40-4f907e853587",
                            Email = "client6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT6@GMAIL.COM",
                            NormalizedUserName = "CLIENT6",
                            PasswordHash = "AQAAAAIAAYagAAAAEPMBpKGxj0KiOEaL3yoSMRRAZQ/zHAk2YUJq/7wsiULK9nGZLmLMNQO47MTs+VZsEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3c3dc4b-8a0e-4d24-8ea1-b47e3084fd51",
                            TableId = 6,
                            TwoFactorEnabled = false,
                            UserName = "client6"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "794e60d4-546a-48e8-b568-e480f4944133",
                            Email = "client7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT7@GMAIL.COM",
                            NormalizedUserName = "CLIENT7",
                            PasswordHash = "AQAAAAIAAYagAAAAEDI/qBOcx/Zrh3yO6/+nNAKLrfGibnzMCx3I5WxKlZdPtt2MTGRQ3NWt/YjM+eI7nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf5470f2-fddf-42ab-b145-f69c7f3cd6c9",
                            TableId = 7,
                            TwoFactorEnabled = false,
                            UserName = "client7"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bac6ec0-1242-4b00-8180-18b823aec1d7",
                            Email = "client8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT8@GMAIL.COM",
                            NormalizedUserName = "CLIENT8",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7zGAABWsh51LcOghDMhLJ3TWsWZwshAuSpFw7tPlDClmJ2hovO5FAOBJF6BkUFDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dd87ee6-4b0a-4bdf-b3b2-9634206e395a",
                            TableId = 8,
                            TwoFactorEnabled = false,
                            UserName = "client8"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "410959ae-55cf-4a9c-a29e-3a4d83040e1e",
                            Email = "client9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT9@GMAIL.COM",
                            NormalizedUserName = "CLIENT9",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+1fvMFkIZD6HRhUgbofDvUBgSvLt3cWWYxm42O7YXerR39QhgGpyuPIkQT4VVlMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cd19aa6-b1bc-4a69-96a2-332fdee3aef8",
                            TableId = 9,
                            TwoFactorEnabled = false,
                            UserName = "client9"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d901023-f4ba-47e7-834b-3492a394ceb6",
                            Email = "client10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT10@GMAIL.COM",
                            NormalizedUserName = "CLIENT10",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEMXWRd/AdZW1tTssulwgXFKPfRaFQ1Zoun+LZ4g8HluF6GMBptsY6tUqZiMsaMNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8be474dc-b31e-4d62-9ccd-3e5d1493e1f0",
                            TableId = 10,
                            TwoFactorEnabled = false,
                            UserName = "client10"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Dry"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Broth-based"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Spicy"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageId")
                        .HasName("PRIMARY");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ContentType = "image/jpeg",
                            Name = "bun-bo-hue.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ContentType = "image/jpeg",
                            Name = "pho.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ContentType = "image/jpeg",
                            Name = "banh-mi.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ContentType = "image/jpeg",
                            Name = "banh-xeo.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ContentType = "image/jpeg",
                            Name = "banh-canh.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            ContentType = "image/jpeg",
                            Name = "banh-cuon.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ContentType = "image/jpeg",
                            Name = "com-chien.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ContentType = "image/jpeg",
                            Name = "bun-rieu.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ContentType = "image/jpeg",
                            Name = "bun-thit-nuong.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            ContentType = "image/jpeg",
                            Name = "mi-xao.jpg"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Calories")
                        .HasColumnType("double");

                    b.Property<double?>("Fat")
                        .HasColumnType("double");

                    b.Property<double?>("Fiber")
                        .HasColumnType("double");

                    b.Property<double?>("Protein")
                        .HasColumnType("double");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("NutritionFact", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Calories = 33.0,
                            Fat = 129.0,
                            Fiber = 162.0,
                            Protein = 160.0
                        },
                        new
                        {
                            ProductId = 2,
                            Calories = 152.0,
                            Fat = 98.0,
                            Fiber = 165.0,
                            Protein = 70.0
                        },
                        new
                        {
                            ProductId = 3,
                            Calories = 179.0,
                            Fat = 81.0,
                            Fiber = 49.0,
                            Protein = 157.0
                        },
                        new
                        {
                            ProductId = 4,
                            Calories = 21.0,
                            Fat = 5.0,
                            Fiber = 164.0,
                            Protein = 173.0
                        },
                        new
                        {
                            ProductId = 5,
                            Calories = 81.0,
                            Fat = 100.0,
                            Fiber = 154.0,
                            Protein = 139.0
                        },
                        new
                        {
                            ProductId = 6,
                            Calories = 44.0,
                            Fat = 19.0,
                            Fiber = 120.0,
                            Protein = 153.0
                        },
                        new
                        {
                            ProductId = 7,
                            Calories = 12.0,
                            Fat = 49.0,
                            Fiber = 10.0,
                            Protein = 123.0
                        },
                        new
                        {
                            ProductId = 8,
                            Calories = 57.0,
                            Fat = 8.0,
                            Fiber = 19.0,
                            Protein = 34.0
                        },
                        new
                        {
                            ProductId = 9,
                            Calories = 31.0,
                            Fat = 116.0,
                            Fiber = 68.0,
                            Protein = 36.0
                        },
                        new
                        {
                            ProductId = 10,
                            Calories = 102.0,
                            Fat = 25.0,
                            Fiber = 52.0,
                            Protein = 45.0
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.HasIndex(new[] { "TableId" }, "TableId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = "1",
                            PeopleCount = 5,
                            StartTime = new DateTime(2024, 12, 22, 16, 15, 4, 932, DateTimeKind.Local).AddTicks(5381),
                            Status = 0,
                            TableId = 1,
                            TotalAmount = 490000m
                        },
                        new
                        {
                            OrderId = "2",
                            PeopleCount = 2,
                            StartTime = new DateTime(2024, 12, 22, 16, 15, 4, 932, DateTimeKind.Local).AddTicks(5541),
                            Status = 0,
                            TableId = 6,
                            TotalAmount = 265000m
                        },
                        new
                        {
                            OrderId = "3",
                            PeopleCount = 4,
                            StartTime = new DateTime(2024, 12, 22, 16, 15, 4, 932, DateTimeKind.Local).AddTicks(5575),
                            Status = 0,
                            TableId = 2,
                            TotalAmount = 115000m
                        },
                        new
                        {
                            OrderId = "4",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 30000m
                        },
                        new
                        {
                            OrderId = "5",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 50000m
                        },
                        new
                        {
                            OrderId = "6",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 45000m
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("PriceAtPurchase")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("OrderItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "OrderId");

                    b.HasIndex(new[] { "ProductId" }, "ProductId");

                    b.ToTable("OrderItem", (string)null);

                    b.HasData(
                        new
                        {
                            OrderItemId = "101",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 1,
                            Quantity = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "102",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 2,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "103",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "104",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "105",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "106",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "107",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "108",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "201",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 3,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "202",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "203",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "204",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "205",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "301",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "3",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "302",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "3",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "401",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "4",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "501",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "5",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "601",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "6",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Bun Bo Hue",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Pho",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Banh Mi",
                            Price = 25000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Banh Xeo",
                            Price = 35000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Banh Canh",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Banh Cuon",
                            Price = 30000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Com Chien",
                            Price = 25000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Bun Rieu",
                            Price = 45000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Bun Thit Nuong",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Mi Xao",
                            Price = 45000m,
                            Unit = "Plate"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("TableId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ZoneId" }, "ZoneId");

                    b.ToTable("Table", (string)null);

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Number = 1,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 2,
                            Number = 2,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 3,
                            Number = 3,
                            SeatsCount = 8,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 4,
                            Number = 4,
                            SeatsCount = 6,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 5,
                            Number = 1,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 6,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 7,
                            Number = 3,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 8,
                            Number = 4,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 9,
                            Number = 1,
                            SeatsCount = 3,
                            ZoneId = 3
                        },
                        new
                        {
                            TableId = 10,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 3
                        },
                        new
                        {
                            TableId = 11,
                            Number = 5,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 12,
                            Number = 3,
                            SeatsCount = 5,
                            ZoneId = 3
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("Zone", (string)null);

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            Name = "Inside"
                        },
                        new
                        {
                            ZoneId = 2,
                            Name = "Backyard"
                        },
                        new
                        {
                            ZoneId = 3,
                            Name = "Outside"
                        },
                        new
                        {
                            ZoneId = 4,
                            Name = "VIP"
                        },
                        new
                        {
                            ZoneId = 5,
                            Name = "Front"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BistroQ.Core.Entities.AppUser", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("User")
                        .HasForeignKey("BistroQ.Core.Entities.AppUser", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_2");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithOne("NutritionFact")
                        .HasForeignKey("BistroQ.Core.Entities.NutritionFact", "ProductId")
                        .IsRequired()
                        .HasConstraintName("NutritionFact_ibfk_1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("Order")
                        .HasForeignKey("BistroQ.Core.Entities.Order", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_ibfk_1");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Image", "Image")
                        .WithOne("Product")
                        .HasForeignKey("BistroQ.Core.Entities.Product", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_2");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Zone", "Zone")
                        .WithMany("Tables")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_1");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Navigation("NutritionFact");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
