// <auto-generated />
using System;
using BistroQ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BistroQ.Infrastructure.Migrations
{
    [DbContext(typeof(BistroQContext))]
    [Migration("20241205092841_HopeThisIsTheLastMigration")]
    partial class HopeThisIsTheLastMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Dry"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Broth-based"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageId")
                        .HasName("PRIMARY");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ContentType = "image/jpeg",
                            Name = "bun-bo-hue.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ContentType = "image/jpeg",
                            Name = "pho.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ContentType = "image/jpeg",
                            Name = "banh-mi.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ContentType = "image/jpeg",
                            Name = "banh-xeo.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ContentType = "image/jpeg",
                            Name = "banh-canh.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            ContentType = "image/jpeg",
                            Name = "banh-cuon.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ContentType = "image/jpeg",
                            Name = "com-chien.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ContentType = "image/jpeg",
                            Name = "bun-rieu.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ContentType = "image/jpeg",
                            Name = "bun-thit-nuong.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            ContentType = "image/jpeg",
                            Name = "mi-xao.jpg"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Calories")
                        .HasColumnType("double");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("NutritionFact", (string)null);
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.HasIndex(new[] { "TableId" }, "TableId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = "1",
                            PeopleCount = 5,
                            StartTime = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4384),
                            Status = 0,
                            TableId = 1,
                            TotalAmount = 490000m
                        },
                        new
                        {
                            OrderId = "2",
                            PeopleCount = 2,
                            StartTime = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4508),
                            Status = 0,
                            TableId = 6,
                            TotalAmount = 265000m
                        },
                        new
                        {
                            OrderId = "3",
                            PeopleCount = 4,
                            StartTime = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4527),
                            Status = 0,
                            TableId = 2,
                            TotalAmount = 115000m
                        },
                        new
                        {
                            OrderId = "4",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 30000m
                        },
                        new
                        {
                            OrderId = "5",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 50000m
                        },
                        new
                        {
                            OrderId = "6",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 45000m
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("PriceAtPurchase")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("OrderItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "OrderId");

                    b.HasIndex(new[] { "ProductId" }, "ProductId");

                    b.ToTable("OrderItem", (string)null);

                    b.HasData(
                        new
                        {
                            OrderItemId = "101",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4171),
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 1,
                            Quantity = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4178)
                        },
                        new
                        {
                            OrderItemId = "102",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4184),
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 2,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4185)
                        },
                        new
                        {
                            OrderItemId = "103",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4189),
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4189)
                        },
                        new
                        {
                            OrderItemId = "104",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4194),
                            OrderId = "1",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4195)
                        },
                        new
                        {
                            OrderItemId = "105",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4200),
                            OrderId = "1",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4200)
                        },
                        new
                        {
                            OrderItemId = "106",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4205),
                            OrderId = "1",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4205)
                        },
                        new
                        {
                            OrderItemId = "107",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4209),
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4209)
                        },
                        new
                        {
                            OrderItemId = "108",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4216),
                            OrderId = "1",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4216)
                        },
                        new
                        {
                            OrderItemId = "201",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4220),
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 3,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4221)
                        },
                        new
                        {
                            OrderItemId = "202",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4227),
                            OrderId = "2",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4227)
                        },
                        new
                        {
                            OrderItemId = "203",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4319),
                            OrderId = "2",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4320)
                        },
                        new
                        {
                            OrderItemId = "204",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4325),
                            OrderId = "2",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4326)
                        },
                        new
                        {
                            OrderItemId = "205",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4331),
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4331)
                        },
                        new
                        {
                            OrderItemId = "301",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4335),
                            OrderId = "3",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4336)
                        },
                        new
                        {
                            OrderItemId = "302",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4341),
                            OrderId = "3",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4353)
                        },
                        new
                        {
                            OrderItemId = "401",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4367),
                            OrderId = "4",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4368)
                        },
                        new
                        {
                            OrderItemId = "501",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4372),
                            OrderId = "5",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4373)
                        },
                        new
                        {
                            OrderItemId = "601",
                            CreatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4379),
                            OrderId = "6",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 5, 16, 28, 40, 563, DateTimeKind.Local).AddTicks(4379)
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Bun Bo Hue",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Pho",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Banh Mi",
                            Price = 25000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Banh Xeo",
                            Price = 35000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Banh Canh",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Banh Cuon",
                            Price = 30000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Com Chien",
                            Price = 25000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Bun Rieu",
                            Price = 45000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Bun Thit Nuong",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Mi Xao",
                            Price = 45000m,
                            Unit = "Plate"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("TableId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ZoneId" }, "ZoneId");

                    b.ToTable("Table", (string)null);

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Number = 1,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 2,
                            Number = 2,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 3,
                            Number = 3,
                            SeatsCount = 8,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 4,
                            Number = 4,
                            SeatsCount = 6,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 5,
                            Number = 1,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 6,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 7,
                            Number = 3,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 8,
                            Number = 4,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 9,
                            Number = 1,
                            SeatsCount = 3,
                            ZoneId = 3
                        },
                        new
                        {
                            TableId = 10,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 3
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("Zone", (string)null);

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            Name = "Inside"
                        },
                        new
                        {
                            ZoneId = 2,
                            Name = "Backyard"
                        },
                        new
                        {
                            ZoneId = 3,
                            Name = "Outside"
                        },
                        new
                        {
                            ZoneId = 4,
                            Name = "VIP"
                        });
                });

            modelBuilder.Entity("BistroQ.Infrastructure.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a86419d-d2a4-4012-84d7-a09dbc110f10",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFHkKz3ucjpyWKGU7TGx6wCKkuYSU8kRuEBIq80nHE9R2kAkTL8PxF/KHmOal3GzuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20b08de9-bbb0-47d1-b033-2b7d4e125a20",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb6c95b6-e943-4cdc-9d10-ea03ef580b86",
                            Email = "kitchen@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KITCHEN@GMAIL.COM",
                            NormalizedUserName = "KITCHEN",
                            PasswordHash = "AQAAAAIAAYagAAAAELBSynuR2bo+H5qdQEq6AlPxDOmD4YAPzespEPpr19ANiuXCdxt7p1H0DURMTnrM6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2005e51-aa99-4f5a-86ab-e011123a28d5",
                            TwoFactorEnabled = false,
                            UserName = "kitchen"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d3273a5-7393-426c-bd44-a2c36d1d7e71",
                            Email = "cashier@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CASHIER@GMAIL.COM",
                            NormalizedUserName = "CASHIER",
                            PasswordHash = "AQAAAAIAAYagAAAAECoS4gDLfm7YqgXkpIOvjoFdu/Ff35ImhamoXArX+FdjcSil/7GIN1OsNU2YKDqkQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acd6cda1-eaaa-42a6-be5e-79cde24a2275",
                            TwoFactorEnabled = false,
                            UserName = "cashier"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a8faa59-3eee-4e05-aa1d-86bad8d073fe",
                            Email = "client1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEKV7UV8XjHuvUSAtHz/JV0SxVvRayqNkDIO0NIwbQrk9c3dMtD01NaMWNPf7APNKmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae2a3db0-35d0-4a03-8117-bd019373bbcc",
                            TableId = 1,
                            TwoFactorEnabled = false,
                            UserName = "client1"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc69e7b-dc45-480b-b44a-a678eb7711dc",
                            Email = "client2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTSRuiDFaUiJWrUPXCAajaheZsRSw2bGJTUBE01BXCHxMJVInNY/DFr/QwN40A8JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67f51de4-42c6-4a4c-a758-ca81dba5f80c",
                            TableId = 2,
                            TwoFactorEnabled = false,
                            UserName = "client2"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b99d456d-fa84-4988-8bdf-02674109936e",
                            Email = "client3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@GMAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEPlKtAvbdApC0ld8O5jJwwM8LdWWS+Na+C7zKnP/qAXxZ0iysw41W2N7hsHXIHYkbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a179cfaf-3d66-4385-bb76-e880c1ffb6c0",
                            TableId = 3,
                            TwoFactorEnabled = false,
                            UserName = "client3"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28da7344-ddcb-4aec-8140-951f795c46dd",
                            Email = "client4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT4@GMAIL.COM",
                            NormalizedUserName = "CLIENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXYZcCa79nJdAkK1l5yNb/h/D/VhNUMTAw0gLu0mxgjXhJ5puzl8f3P9Fpv0WL3UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1f46438-4cd0-4d3e-96bd-d50efcb3f57a",
                            TableId = 4,
                            TwoFactorEnabled = false,
                            UserName = "client4"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "880bbf17-841b-43c3-8233-3262a01ef7cf",
                            Email = "client5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT5@GMAIL.COM",
                            NormalizedUserName = "CLIENT5",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFJIUpGEFvcQwjux4LLM2QYO70KOnlavQNiQiry1asc2NrKJWDDSQ7SAHzUvSD7og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e260389-7df6-436d-84e5-aae21062bbfb",
                            TableId = 5,
                            TwoFactorEnabled = false,
                            UserName = "client5"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c32b882-2a9b-4343-9192-c94dc33f45ef",
                            Email = "client6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT6@GMAIL.COM",
                            NormalizedUserName = "CLIENT6",
                            PasswordHash = "AQAAAAIAAYagAAAAEENdnRvm8YXzAQ7X1tExdhmgsdRUiSz4bgcDq92ibyXfvzulCgCwfQHBt80AJm1ZsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e3b2241-032d-4e29-8726-f26e3a6780b6",
                            TableId = 6,
                            TwoFactorEnabled = false,
                            UserName = "client6"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eba2a7b-8899-42c8-adff-56d00a079857",
                            Email = "client7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT7@GMAIL.COM",
                            NormalizedUserName = "CLIENT7",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKpFFxXuajM2z1gxbJBYhzmIt2zILKvyEa/TZ4nD3Kg6HbZe04XZxtZp7105EJAwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f0b604b-93de-45c9-9462-e6295ba942bc",
                            TableId = 7,
                            TwoFactorEnabled = false,
                            UserName = "client7"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a6a3c1d-419f-4c70-bb42-330148e1abc0",
                            Email = "client8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT8@GMAIL.COM",
                            NormalizedUserName = "CLIENT8",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxOuFez7va+AvbHhbLv8If37+CxQqKzO0Yy5cc4lGj+Wk+NHoJEgj5xh7Tw6LEPvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7d3511b-a28a-4be4-85e9-e9d70fa13118",
                            TableId = 8,
                            TwoFactorEnabled = false,
                            UserName = "client8"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db2d8507-aa63-42aa-9b9b-6492fb7df34a",
                            Email = "client9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT9@GMAIL.COM",
                            NormalizedUserName = "CLIENT9",
                            PasswordHash = "AQAAAAIAAYagAAAAEL2W/jyYmI3uW+rABY4m9mDEVkdax58pp5E1dHwedeD17/01lTyntn2zE+lcQB116w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26992a25-177f-48b2-a9d4-7d4209669785",
                            TableId = 9,
                            TwoFactorEnabled = false,
                            UserName = "client9"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8df287d4-1c15-4877-8b40-db8af0b12b5a",
                            Email = "client10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT10@GMAIL.COM",
                            NormalizedUserName = "CLIENT10",
                            PasswordHash = "AQAAAAIAAYagAAAAEIlSMIxuiMEDMX2eF1F0Q55LRmq6I8kpABq7gNS26GvorfmxrPbclRTXVG3JU8oPPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0ef6fff-25f8-4884-8074-90b84503317a",
                            TableId = 10,
                            TwoFactorEnabled = false,
                            UserName = "client10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithOne("NutritionFact")
                        .HasForeignKey("BistroQ.Core.Entities.NutritionFact", "ProductId")
                        .IsRequired()
                        .HasConstraintName("NutritionFact_ibfk_1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("Order")
                        .HasForeignKey("BistroQ.Core.Entities.Order", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_ibfk_1");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Image", "Image")
                        .WithOne("Product")
                        .HasForeignKey("BistroQ.Core.Entities.Product", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_2");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Zone", "Zone")
                        .WithMany("Tables")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_1");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("BistroQ.Infrastructure.Identity.AppUser", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("User")
                        .HasForeignKey("BistroQ.Infrastructure.Identity.AppUser", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_2");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Navigation("NutritionFact");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
