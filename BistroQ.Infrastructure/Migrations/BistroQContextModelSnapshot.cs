// <auto-generated />
using System;
using BistroQ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BistroQ.Infrastructure.Migrations
{
    [DbContext(typeof(BistroQContext))]
    partial class BistroQContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Dry"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Broth-based"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageId")
                        .HasName("PRIMARY");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ContentType = "image/jpeg",
                            Name = "bun-bo-hue.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ContentType = "image/jpeg",
                            Name = "pho.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ContentType = "image/jpeg",
                            Name = "banh-mi.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ContentType = "image/jpeg",
                            Name = "banh-xeo.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ContentType = "image/jpeg",
                            Name = "banh-canh.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            ContentType = "image/jpeg",
                            Name = "banh-cuon.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ContentType = "image/jpeg",
                            Name = "com-chien.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ContentType = "image/jpeg",
                            Name = "bun-rieu.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ContentType = "image/jpeg",
                            Name = "bun-thit-nuong.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            ContentType = "image/jpeg",
                            Name = "mi-xao.jpg"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Calories")
                        .HasColumnType("double");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("NutritionFact", (string)null);
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.HasIndex(new[] { "TableId" }, "TableId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = "1",
                            PeopleCount = 5,
                            StartTime = new DateTime(2024, 11, 23, 13, 29, 32, 857, DateTimeKind.Local).AddTicks(8435),
                            Status = "In Progress",
                            TableId = 1,
                            TotalAmount = 490000m
                        },
                        new
                        {
                            OrderId = "2",
                            PeopleCount = 2,
                            StartTime = new DateTime(2024, 11, 23, 13, 29, 32, 857, DateTimeKind.Local).AddTicks(8586),
                            Status = "In Progress",
                            TableId = 6,
                            TotalAmount = 265000m
                        },
                        new
                        {
                            OrderId = "3",
                            PeopleCount = 4,
                            StartTime = new DateTime(2024, 11, 23, 13, 29, 32, 857, DateTimeKind.Local).AddTicks(8605),
                            Status = "In Progress",
                            TableId = 2,
                            TotalAmount = 115000m
                        },
                        new
                        {
                            OrderId = "4",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 30000m
                        },
                        new
                        {
                            OrderId = "5",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 50000m
                        },
                        new
                        {
                            OrderId = "6",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 45000m
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("PriceAtPurchase")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "OrderId");

                    b.HasIndex(new[] { "ProductId" }, "ProductId");

                    b.ToTable("OrderItem", (string)null);

                    b.HasData(
                        new
                        {
                            OrderItemId = "101",
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 1,
                            Quantity = 2,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "102",
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 2,
                            Quantity = 1,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "103",
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 1,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "104",
                            OrderId = "1",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = "Pending"
                        },
                        new
                        {
                            OrderItemId = "105",
                            OrderId = "1",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = "Completed"
                        },
                        new
                        {
                            OrderItemId = "106",
                            OrderId = "1",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 3,
                            Status = "Pending"
                        },
                        new
                        {
                            OrderItemId = "107",
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 1,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "108",
                            OrderId = "1",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 2,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "201",
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 3,
                            Status = "Completed"
                        },
                        new
                        {
                            OrderItemId = "202",
                            OrderId = "2",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = "Completed"
                        },
                        new
                        {
                            OrderItemId = "203",
                            OrderId = "2",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "204",
                            OrderId = "2",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            OrderItemId = "205",
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = "Pending"
                        },
                        new
                        {
                            OrderItemId = "301",
                            OrderId = "3",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 1,
                            Status = "In Progress"
                        },
                        new
                        {
                            OrderItemId = "302",
                            OrderId = "3",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 2,
                            Status = "Completed"
                        },
                        new
                        {
                            OrderItemId = "401",
                            OrderId = "4",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = "Completed"
                        },
                        new
                        {
                            OrderItemId = "501",
                            OrderId = "5",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = "Completed"
                        },
                        new
                        {
                            OrderItemId = "601",
                            OrderId = "6",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 1,
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Bun Bo Hue",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Pho",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Banh Mi",
                            Price = 25000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Banh Xeo",
                            Price = 35000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Banh Canh",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Banh Cuon",
                            Price = 30000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Com Chien",
                            Price = 25000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Bun Rieu",
                            Price = 45000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Bun Thit Nuong",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Mi Xao",
                            Price = 45000m,
                            Unit = "Plate"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("TableId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ZoneId" }, "ZoneId");

                    b.ToTable("Table", (string)null);

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Number = 1,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 2,
                            Number = 2,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 3,
                            Number = 3,
                            SeatsCount = 8,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 4,
                            Number = 4,
                            SeatsCount = 6,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 5,
                            Number = 1,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 6,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 7,
                            Number = 3,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 8,
                            Number = 4,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 9,
                            Number = 1,
                            SeatsCount = 3,
                            ZoneId = 3
                        },
                        new
                        {
                            TableId = 10,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 3
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("Zone", (string)null);

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            Name = "Inside"
                        },
                        new
                        {
                            ZoneId = 2,
                            Name = "Backyard"
                        },
                        new
                        {
                            ZoneId = 3,
                            Name = "Outside"
                        },
                        new
                        {
                            ZoneId = 4,
                            Name = "VIP"
                        });
                });

            modelBuilder.Entity("BistroQ.Infrastructure.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcf53321-77e2-421a-a9d7-24545db984ab",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFBcKKHqanfV5CdOZJwZb1bIBAU6eXiq3c2AK0Gh4GPxq6rneAV3dKf2NcBJtsGlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "155c00a6-546d-49ac-85fa-c0cf557b851b",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "397ca3be-ffc8-4408-88bf-01b2f580326a",
                            Email = "kitchen@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KITCHEN@GMAIL.COM",
                            NormalizedUserName = "KITCHEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdIzz45N7L5H0E//gSBBRtT2Y+f1rbjuV5b+oDRoZse/Ex4M+zKeK9M+Py/1COsmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b05778f8-0f1a-4fc3-a60e-584c026af420",
                            TwoFactorEnabled = false,
                            UserName = "kitchen"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03465457-cf48-4a35-8637-b98978530b9b",
                            Email = "cashier@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CASHIER@GMAIL.COM",
                            NormalizedUserName = "CASHIER",
                            PasswordHash = "AQAAAAIAAYagAAAAELQ0B18pcbEW9dFAbL01+LydaO+9CN+j1XRXokEmQZKHf2mPUCcuLQoz4gN2J8medA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af8d94d9-27ce-44b2-9bb1-00b6e331b8b5",
                            TwoFactorEnabled = false,
                            UserName = "cashier"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c10edde-3b67-4bad-aa70-23e7b486eb1a",
                            Email = "client1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAENa8CWutoNM1El6nLt0qbfJXqareRFloGQg/bESByNOWzlk8cJ0sywf4XdpDspAL1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6b2298c-088b-49e9-b114-88e3fe087eca",
                            TableId = 1,
                            TwoFactorEnabled = false,
                            UserName = "client1"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be9a0bd0-c4c3-488e-ae59-fc16d8327aa5",
                            Email = "client2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3WNapmRSSdpzNxFKj96l8SC1K9jPVrkCmMAi4HUt5IoZigQeHqNAHaPgOYhfv6ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d1cd2a4-cace-4385-83f3-d800fd8485ce",
                            TableId = 2,
                            TwoFactorEnabled = false,
                            UserName = "client2"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ce245d9-fe13-4c3b-9f6e-0b298b4154db",
                            Email = "client3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@GMAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQW3zlGr0ma5X9D/BkfccKV0L+42y84x6o55zHOokGOreN1aHU8rlSyD9NFu7u0gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50b2b925-84ed-4282-89f3-50bc0883ad3c",
                            TableId = 3,
                            TwoFactorEnabled = false,
                            UserName = "client3"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c90fdc7-41f2-4f31-aa30-ccf77e235952",
                            Email = "client4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT4@GMAIL.COM",
                            NormalizedUserName = "CLIENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/F1pnlG0cZ0iwrkjbVPFI6tjIlOktfVaAC6MPxzgG2VpisiAWxcobfTRSh/aLdyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbcf96fe-1171-4c92-85e8-2492fd98d0ef",
                            TableId = 4,
                            TwoFactorEnabled = false,
                            UserName = "client4"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0918fbb-ff71-4c59-b6f7-c814597f3f89",
                            Email = "client5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT5@GMAIL.COM",
                            NormalizedUserName = "CLIENT5",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzIZJgpT7MdSwKjj2Q4dvdrTvfiXajdeYfCA15nutFP18ukKeHOEdT1zb5XikrxCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67d1b8bb-07d0-4db8-8e57-4667986dae4a",
                            TableId = 5,
                            TwoFactorEnabled = false,
                            UserName = "client5"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3501d27-10c3-42cb-9150-1a7dd35927d2",
                            Email = "client6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT6@GMAIL.COM",
                            NormalizedUserName = "CLIENT6",
                            PasswordHash = "AQAAAAIAAYagAAAAEOlgIYu4qmPwb96XSt9dIupqseMMiLDEzujpYkdFmORGrck0zUkDoMmxXvlvTTkKPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8e1473c-47bc-48e8-9987-a42a83f07fe5",
                            TableId = 6,
                            TwoFactorEnabled = false,
                            UserName = "client6"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d744fead-418c-41b4-9588-8abed9d88763",
                            Email = "client7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT7@GMAIL.COM",
                            NormalizedUserName = "CLIENT7",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVn4wCDgxaPjZgpqoZVP8YlR37ubn+wTkwu7Aomzj9H0ntUaGtbg9hyDnuSayheUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc69656f-92e7-4e62-a46e-b3883bc934e4",
                            TableId = 7,
                            TwoFactorEnabled = false,
                            UserName = "client7"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0655542b-0d5d-4272-8124-c923b4da61cc",
                            Email = "client8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT8@GMAIL.COM",
                            NormalizedUserName = "CLIENT8",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9szq4RrnTj2cUrUejqXNvpHB5mZX51xZ9snP8zTwbIAM1MnJCZXyvdbV72ElUnmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dca7ce28-a8c9-4759-aac0-87a350497c07",
                            TableId = 8,
                            TwoFactorEnabled = false,
                            UserName = "client8"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a67955a0-914e-4ce3-8329-e482d9f8968c",
                            Email = "client9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT9@GMAIL.COM",
                            NormalizedUserName = "CLIENT9",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFGvrvJKCMCH19D2hxoPmfNynTVjamAYMzhot2MEgxro0HCOZDKH8i5eluPzqxigw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddc42576-b0ea-4b8b-9878-a45e2c16c390",
                            TableId = 9,
                            TwoFactorEnabled = false,
                            UserName = "client9"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fc4c5ac-fc63-45b0-b081-27130d45cbc5",
                            Email = "client10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT10@GMAIL.COM",
                            NormalizedUserName = "CLIENT10",
                            PasswordHash = "AQAAAAIAAYagAAAAEDD+lsXNYaP7Y77/Ea3a8xHZeRWhFwXHNPRPqAFgVZTnH0boZEI4RDEJa3v39WARDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7fa8609-f780-4fa8-adc3-367383de3503",
                            TableId = 10,
                            TwoFactorEnabled = false,
                            UserName = "client10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithOne("NutritionFact")
                        .HasForeignKey("BistroQ.Core.Entities.NutritionFact", "ProductId")
                        .IsRequired()
                        .HasConstraintName("NutritionFact_ibfk_1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("Order")
                        .HasForeignKey("BistroQ.Core.Entities.Order", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_ibfk_1");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Image", "Image")
                        .WithOne("Product")
                        .HasForeignKey("BistroQ.Core.Entities.Product", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_2");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Zone", "Zone")
                        .WithMany("Tables")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_1");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("BistroQ.Infrastructure.Identity.AppUser", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("User")
                        .HasForeignKey("BistroQ.Infrastructure.Identity.AppUser", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_2");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BistroQ.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Navigation("NutritionFact");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
