// <auto-generated />
using System;
using BistroQ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BistroQ.Infrastructure.Migrations
{
    [DbContext(typeof(BistroQContext))]
    [Migration("20250107094733_SeedDiscountPrice")]
    partial class SeedDiscountPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BistroQ.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a7a5fd6-1193-4e54-8e1b-505278e65831",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKEr2HIfaJCrWN16VnAOgCdmXYxjGSPnAzO3+X9AywKqJWvRwWx6nb7MgKTu2918xw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70e2328e-ec90-42b3-ac25-a74772ceca5e",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab7fc249-71b1-4882-ad5c-e4e9a4b4884d",
                            Email = "kitchen@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KITCHEN@GMAIL.COM",
                            NormalizedUserName = "KITCHEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG63E/YwJsg8r0nG0AeexxfeEAJ60GLp5cgZgSpC98CL3+HAUIyJar8Xi7zl38/t7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b33f70ce-8d6d-4f20-bfa3-2283fe3ac93b",
                            TwoFactorEnabled = false,
                            UserName = "kitchen"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7cdcca6-904d-47c2-be53-4d49a55bd9b9",
                            Email = "cashier@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CASHIER@GMAIL.COM",
                            NormalizedUserName = "CASHIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdbrzEecahNZz8Mpnykhe0cBodVDMyTTserhR4xGWcN998r83m7Bp1I1bXoilBt/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e909ce26-43b5-4522-a0ca-139ee6b2de53",
                            TwoFactorEnabled = false,
                            UserName = "cashier"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "783a8fc4-fe13-4fe1-bc89-176e54976426",
                            Email = "client1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEAFoTCnKuxFk+wlQnXRdCKLLSzUZzJA+p5/Bz3s82KjiGv2UxyQopoX6bJ1at5oKDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "988e2a9c-7513-4747-a443-4102897b233e",
                            TableId = 1,
                            TwoFactorEnabled = false,
                            UserName = "client1"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffc73607-4491-4207-9632-f178b7b4c14c",
                            Email = "client2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEj1UjlXp2E2qDZoRruftUWSPJDfGrGuWD8c6OZg+ADHBPEXCiC/m6/LZLHiyUmvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28250322-0539-4b76-9506-e0211592b953",
                            TableId = 2,
                            TwoFactorEnabled = false,
                            UserName = "client2"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91bff642-5d51-4e7f-a5ad-18f3e94cb0ab",
                            Email = "client3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT3@GMAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEJR3nq/WvuvfAKtHJY0eaoOFThlwZIRY6rpVkHwt+ktal1kQjuaP+rYRrLORfuH8zQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10049a27-5874-4c3b-aa97-d28c1647894b",
                            TableId = 3,
                            TwoFactorEnabled = false,
                            UserName = "client3"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fef0f12-40ed-499a-a915-52b6816a7421",
                            Email = "client4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT4@GMAIL.COM",
                            NormalizedUserName = "CLIENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAENINJROM1QGgW4plvtzLQL/iJfGp45aksTx3j3yBeg+ek0/IwKxbkRSqx3lzGo4EaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43db9469-749d-4f70-b634-50a8291fe130",
                            TableId = 4,
                            TwoFactorEnabled = false,
                            UserName = "client4"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bf8f00d-edb0-46f6-a583-6c4d58110fc1",
                            Email = "client5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT5@GMAIL.COM",
                            NormalizedUserName = "CLIENT5",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYKV0G13tuxdi75Bx8jM/4iM9XaBDWv9xS45tNG1EvquhluU+uijSH0wDJauKvIzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57479e34-b2a8-46a0-80ad-3bb1620c6dfb",
                            TableId = 5,
                            TwoFactorEnabled = false,
                            UserName = "client5"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c9791bb-bd40-49d1-80cc-44bdb7903ca3",
                            Email = "client6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT6@GMAIL.COM",
                            NormalizedUserName = "CLIENT6",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVHCSq61b5AlWQqcbWrfB+D1jEzFtHno44GLIhftE9rrKHzNyyoaBkiDgDWulbjXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b34bf93-2786-42c4-8b2d-958c523ea06b",
                            TableId = 6,
                            TwoFactorEnabled = false,
                            UserName = "client6"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ee88da6-7f32-4463-a3ba-93428fabc899",
                            Email = "client7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT7@GMAIL.COM",
                            NormalizedUserName = "CLIENT7",
                            PasswordHash = "AQAAAAIAAYagAAAAEC9LYCDwwJb/Bojp/vQEX85xBfA8WfMZ/Mzx1/C3b7d8Au+WQh0T4V/OR57OGn1GlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2d00759-20ab-4b12-86cc-0c04129c9f41",
                            TableId = 7,
                            TwoFactorEnabled = false,
                            UserName = "client7"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a061b48-abee-4ac3-b334-72856a585f31",
                            Email = "client8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT8@GMAIL.COM",
                            NormalizedUserName = "CLIENT8",
                            PasswordHash = "AQAAAAIAAYagAAAAEHOTb8SKmDkdlzQDVhaii0Xc1RNjGoBk4Op/r2uzmmZG4T1wM7Y/4rjedf0mxEdLvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e271119e-1395-4ff5-bf16-003154bfaa54",
                            TableId = 8,
                            TwoFactorEnabled = false,
                            UserName = "client8"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ce6624b-99c3-47c3-88aa-7f3596860778",
                            Email = "client9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT9@GMAIL.COM",
                            NormalizedUserName = "CLIENT9",
                            PasswordHash = "AQAAAAIAAYagAAAAEPXT8iPz46xTMPQKphshTDiRTgDAWEw6rWpKeRdqrjG+m4qKUwyM2f1UBy2u79GlNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a345281b-ec34-467d-8bd2-7f36da17c093",
                            TableId = 9,
                            TwoFactorEnabled = false,
                            UserName = "client9"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a1e41dc-a05f-4c4a-ac65-d69f3dd22727",
                            Email = "client10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT10@GMAIL.COM",
                            NormalizedUserName = "CLIENT10",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZYlLh4/8UJLht56t0Wktz4T8SiYUqM65SU/B8dQYJ27pvT9DklG5lT0iknQoOKwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f5baabd-50f9-4a97-b10d-5c74b876fb67",
                            TableId = 10,
                            TwoFactorEnabled = false,
                            UserName = "client10"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Dry"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Broth-based"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Savory Snacks"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Grilled & BBQ"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Appetizers"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageId")
                        .HasName("PRIMARY");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ContentType = "image/jpeg",
                            Name = "bun-bo-hue.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ContentType = "image/jpeg",
                            Name = "pho.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ContentType = "image/jpeg",
                            Name = "banh-mi.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ContentType = "image/jpeg",
                            Name = "banh-xeo.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ContentType = "image/jpeg",
                            Name = "banh-canh.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            ContentType = "image/jpeg",
                            Name = "banh-cuon.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ContentType = "image/jpeg",
                            Name = "com-chien.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ContentType = "image/jpeg",
                            Name = "bun-rieu.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ContentType = "image/jpeg",
                            Name = "bun-thit-nuong.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            ContentType = "image/jpeg",
                            Name = "mi-xao.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000011"),
                            ContentType = "image/jpeg",
                            Name = "dumplings.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000012"),
                            ContentType = "image/jpeg",
                            Name = "bibim-guksu.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000013"),
                            ContentType = "image/jpeg",
                            Name = "minestrone-soup.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000015"),
                            ContentType = "image/jpeg",
                            Name = "cheeseburger.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000016"),
                            ContentType = "image/jpeg",
                            Name = "shawarma.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000017"),
                            ContentType = "image/jpeg",
                            Name = "chow-mein.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000018"),
                            ContentType = "image/jpeg",
                            Name = "samosa.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000019"),
                            ContentType = "image/jpeg",
                            Name = "gyoza.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000020"),
                            ContentType = "image/jpeg",
                            Name = "veggie-burger.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000021"),
                            ContentType = "image/jpeg",
                            Name = "spring-rolls.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000022"),
                            ContentType = "image/jpeg",
                            Name = "takoyaki.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000023"),
                            ContentType = "image/jpeg",
                            Name = "tea.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000024"),
                            ContentType = "image/jpeg",
                            Name = "seafood-pho.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000025"),
                            ContentType = "image/jpeg",
                            Name = "steamed-rice-roll.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000026"),
                            ContentType = "image/jpeg",
                            Name = "espresso.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000027"),
                            ContentType = "image/jpeg",
                            Name = "yakitori.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000028"),
                            ContentType = "image/jpeg",
                            Name = "smoothie.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000029"),
                            ContentType = "image/jpeg",
                            Name = "pad-thai.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000030"),
                            ContentType = "image/jpeg",
                            Name = "udon.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000031"),
                            ContentType = "image/jpeg",
                            Name = "spaghetti-carbonara.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000032"),
                            ContentType = "image/jpeg",
                            Name = "ramen.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000033"),
                            ContentType = "image/jpeg",
                            Name = "chicken-biryani.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000034"),
                            ContentType = "image/jpeg",
                            Name = "coconut-water.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000035"),
                            ContentType = "image/jpeg",
                            Name = "lemonade.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000036"),
                            ContentType = "image/jpeg",
                            Name = "chicken-satay.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000037"),
                            ContentType = "image/jpeg",
                            Name = "milkshake.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000038"),
                            ContentType = "image/jpeg",
                            Name = "bulgogi.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000039"),
                            ContentType = "image/jpeg",
                            Name = "soba-noodles.jpg"
                        },
                        new
                        {
                            ImageId = new Guid("00000000-0000-0000-0000-000000000040"),
                            ContentType = "image/jpeg",
                            Name = "laksa.jpg"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Calories")
                        .HasColumnType("double");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("double");

                    b.Property<double?>("Fat")
                        .HasColumnType("double");

                    b.Property<double?>("Fiber")
                        .HasColumnType("double");

                    b.Property<double?>("Protein")
                        .HasColumnType("double");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("NutritionFact", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Calories = 479.0,
                            Carbohydrates = 50.0,
                            Fat = 15.0,
                            Fiber = 3.0,
                            Protein = 25.0
                        },
                        new
                        {
                            ProductId = 2,
                            Calories = 431.0,
                            Carbohydrates = 45.0,
                            Fat = 8.0,
                            Fiber = 2.0,
                            Protein = 25.0
                        },
                        new
                        {
                            ProductId = 3,
                            Calories = 461.0,
                            Carbohydrates = 55.0,
                            Fat = 15.0,
                            Fiber = 3.0,
                            Protein = 20.0
                        },
                        new
                        {
                            ProductId = 4,
                            Calories = 517.0,
                            Carbohydrates = 41.600000000000001,
                            Fat = 16.699999999999999,
                            Fiber = 2.2999999999999998,
                            Protein = 8.4000000000000004
                        },
                        new
                        {
                            ProductId = 5,
                            Calories = 379.0,
                            Carbohydrates = 45.0,
                            Fat = 12.0,
                            Fiber = 2.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 6,
                            Calories = 590.0,
                            Carbohydrates = 45.0,
                            Fat = 8.0,
                            Fiber = 2.0,
                            Protein = 5.0
                        },
                        new
                        {
                            ProductId = 7,
                            Calories = 530.0,
                            Carbohydrates = 55.0,
                            Fat = 20.0,
                            Fiber = 3.0,
                            Protein = 15.0
                        },
                        new
                        {
                            ProductId = 8,
                            Calories = 482.0,
                            Carbohydrates = 45.0,
                            Fat = 10.0,
                            Fiber = 3.0,
                            Protein = 20.0
                        },
                        new
                        {
                            ProductId = 9,
                            Calories = 451.0,
                            Carbohydrates = 45.0,
                            Fat = 15.0,
                            Fiber = 3.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 10,
                            Calories = 650.0,
                            Carbohydrates = 65.0,
                            Fat = 18.0,
                            Fiber = 4.0,
                            Protein = 22.0
                        },
                        new
                        {
                            ProductId = 11,
                            Calories = 520.0,
                            Carbohydrates = 60.0,
                            Fat = 16.0,
                            Fiber = 4.0,
                            Protein = 22.0
                        },
                        new
                        {
                            ProductId = 12,
                            Calories = 490.0,
                            Carbohydrates = 48.0,
                            Fat = 14.0,
                            Fiber = 2.0,
                            Protein = 22.0
                        },
                        new
                        {
                            ProductId = 13,
                            Calories = 450.0,
                            Carbohydrates = 50.0,
                            Fat = 12.0,
                            Fiber = 3.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 14,
                            Calories = 520.0,
                            Carbohydrates = 62.0,
                            Fat = 14.0,
                            Fiber = 4.0,
                            Protein = 20.0
                        },
                        new
                        {
                            ProductId = 15,
                            Calories = 480.0,
                            Carbohydrates = 50.0,
                            Fat = 15.0,
                            Fiber = 2.0,
                            Protein = 24.0
                        },
                        new
                        {
                            ProductId = 16,
                            Calories = 500.0,
                            Carbohydrates = 55.0,
                            Fat = 12.0,
                            Fiber = 3.0,
                            Protein = 22.0
                        },
                        new
                        {
                            ProductId = 17,
                            Calories = 440.0,
                            Carbohydrates = 45.0,
                            Fat = 15.0,
                            Fiber = 3.0,
                            Protein = 20.0
                        },
                        new
                        {
                            ProductId = 18,
                            Calories = 470.0,
                            Carbohydrates = 50.0,
                            Fat = 12.0,
                            Fiber = 3.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 19,
                            Calories = 380.0,
                            Carbohydrates = 42.0,
                            Fat = 10.0,
                            Fiber = 3.0,
                            Protein = 15.0
                        },
                        new
                        {
                            ProductId = 20,
                            Calories = 380.0,
                            Carbohydrates = 35.0,
                            Fat = 10.0,
                            Fiber = 4.0,
                            Protein = 15.0
                        },
                        new
                        {
                            ProductId = 21,
                            Calories = 390.0,
                            Carbohydrates = 35.0,
                            Fat = 10.0,
                            Fiber = 3.0,
                            Protein = 12.0
                        },
                        new
                        {
                            ProductId = 22,
                            Calories = 420.0,
                            Carbohydrates = 48.0,
                            Fat = 14.0,
                            Fiber = 2.0,
                            Protein = 16.0
                        },
                        new
                        {
                            ProductId = 23,
                            Calories = 120.0,
                            Carbohydrates = 25.0,
                            Fat = 2.0,
                            Fiber = 0.0,
                            Protein = 2.0
                        },
                        new
                        {
                            ProductId = 24,
                            Calories = 380.0,
                            Carbohydrates = 45.0,
                            Fat = 8.0,
                            Fiber = 2.0,
                            Protein = 22.0
                        },
                        new
                        {
                            ProductId = 25,
                            Calories = 250.0,
                            Carbohydrates = 30.0,
                            Fat = 8.0,
                            Fiber = 3.0,
                            Protein = 12.0
                        },
                        new
                        {
                            ProductId = 26,
                            Calories = 120.0,
                            Carbohydrates = 24.0,
                            Fat = 2.0,
                            Fiber = 0.0,
                            Protein = 2.0
                        },
                        new
                        {
                            ProductId = 27,
                            Calories = 300.0,
                            Carbohydrates = 15.0,
                            Fat = 12.0,
                            Fiber = 0.0,
                            Protein = 32.0
                        },
                        new
                        {
                            ProductId = 28,
                            Calories = 200.0,
                            Carbohydrates = 45.0,
                            Fat = 3.0,
                            Fiber = 1.0,
                            Protein = 3.0
                        },
                        new
                        {
                            ProductId = 29,
                            Calories = 420.0,
                            Carbohydrates = 55.0,
                            Fat = 12.0,
                            Fiber = 2.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 30,
                            Calories = 480.0,
                            Carbohydrates = 65.0,
                            Fat = 12.0,
                            Fiber = 3.0,
                            Protein = 20.0
                        },
                        new
                        {
                            ProductId = 31,
                            Calories = 540.0,
                            Carbohydrates = 60.0,
                            Fat = 18.0,
                            Fiber = 3.0,
                            Protein = 22.0
                        },
                        new
                        {
                            ProductId = 32,
                            Calories = 470.0,
                            Carbohydrates = 50.0,
                            Fat = 15.0,
                            Fiber = 3.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 33,
                            Calories = 520.0,
                            Carbohydrates = 68.0,
                            Fat = 16.0,
                            Fiber = 3.0,
                            Protein = 25.0
                        },
                        new
                        {
                            ProductId = 34,
                            Calories = 100.0,
                            Carbohydrates = 25.0,
                            Fat = 0.5,
                            Fiber = 1.0,
                            Protein = 2.0
                        },
                        new
                        {
                            ProductId = 35,
                            Calories = 120.0,
                            Carbohydrates = 30.0,
                            Fat = 0.20000000000000001,
                            Fiber = 0.0,
                            Protein = 1.0
                        },
                        new
                        {
                            ProductId = 36,
                            Calories = 350.0,
                            Carbohydrates = 18.0,
                            Fat = 15.0,
                            Fiber = 1.0,
                            Protein = 28.0
                        },
                        new
                        {
                            ProductId = 37,
                            Calories = 280.0,
                            Carbohydrates = 48.0,
                            Fat = 8.0,
                            Fiber = 0.0,
                            Protein = 5.0
                        },
                        new
                        {
                            ProductId = 38,
                            Calories = 450.0,
                            Carbohydrates = 45.0,
                            Fat = 15.0,
                            Fiber = 3.0,
                            Protein = 25.0
                        },
                        new
                        {
                            ProductId = 39,
                            Calories = 430.0,
                            Carbohydrates = 50.0,
                            Fat = 12.0,
                            Fiber = 3.0,
                            Protein = 18.0
                        },
                        new
                        {
                            ProductId = 40,
                            Calories = 510.0,
                            Carbohydrates = 55.0,
                            Fat = 14.0,
                            Fiber = 3.0,
                            Protein = 20.0
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex("TableId")
                        .IsUnique();

                    b.HasIndex(new[] { "TableId" }, "TableId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = "1",
                            PeopleCount = 5,
                            StartTime = new DateTime(2025, 1, 7, 16, 47, 31, 946, DateTimeKind.Local).AddTicks(9702),
                            Status = 0,
                            TableId = 1,
                            TotalAmount = 490000m
                        },
                        new
                        {
                            OrderId = "2",
                            PeopleCount = 2,
                            StartTime = new DateTime(2025, 1, 7, 16, 47, 31, 946, DateTimeKind.Local).AddTicks(9904),
                            Status = 0,
                            TableId = 6,
                            TotalAmount = 265000m
                        },
                        new
                        {
                            OrderId = "3",
                            PeopleCount = 4,
                            StartTime = new DateTime(2025, 1, 7, 16, 47, 31, 946, DateTimeKind.Local).AddTicks(9935),
                            Status = 0,
                            TableId = 2,
                            TotalAmount = 115000m
                        },
                        new
                        {
                            OrderId = "4",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 30000m
                        },
                        new
                        {
                            OrderId = "5",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 50000m
                        },
                        new
                        {
                            OrderId = "6",
                            EndTime = new DateTime(2024, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PeopleCount = 0,
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalAmount = 45000m
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("PriceAtPurchase")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("OrderItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "OrderId");

                    b.HasIndex(new[] { "ProductId" }, "ProductId");

                    b.ToTable("OrderItem", (string)null);

                    b.HasData(
                        new
                        {
                            OrderItemId = "101",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 1,
                            Quantity = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "102",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 50000m,
                            ProductId = 2,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "103",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "104",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "105",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "106",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "107",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "108",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "1",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "201",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 3,
                            Quantity = 3,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "202",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "203",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "204",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "205",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "2",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "301",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "3",
                            PriceAtPurchase = 35000m,
                            ProductId = 4,
                            Quantity = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "302",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "3",
                            PriceAtPurchase = 40000m,
                            ProductId = 5,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "401",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "4",
                            PriceAtPurchase = 30000m,
                            ProductId = 6,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "501",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "5",
                            PriceAtPurchase = 25000m,
                            ProductId = 7,
                            Quantity = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderItemId = "601",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "6",
                            PriceAtPurchase = 45000m,
                            ProductId = 8,
                            Quantity = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            DiscountPrice = 45000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Bun Bo Hue",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Pho",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            DiscountPrice = 22000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Banh Mi",
                            Price = 25000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Banh Xeo",
                            Price = 35000m,
                            Unit = "Piece"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            DiscountPrice = 37000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Banh Canh",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Banh Cuon",
                            Price = 30000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            DiscountPrice = 23000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Com Chien",
                            Price = 25000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Bun Rieu",
                            Price = 45000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            DiscountPrice = 37000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Bun Thit Nuong",
                            Price = 40000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Mi Xao",
                            Price = 45000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 5,
                            DiscountPrice = 42000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Dumplings",
                            Price = 45000m,
                            Unit = "Piece (6pcs)"
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Bibim Guksu",
                            Price = 45000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 2,
                            DiscountPrice = 59000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Minestrone Soup",
                            Price = 62000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3,
                            DiscountPrice = 75000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Cheeseburger",
                            Price = 80000m,
                            Unit = "Piece (1pc)"
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Name = "Shawarma",
                            Price = 50000m,
                            Unit = "Wrap"
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 1,
                            DiscountPrice = 52000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Name = "Chow Mein",
                            Price = 55000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 5,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000018"),
                            Name = "Samosa",
                            Price = 40000m,
                            Unit = "Piece (4pcs)"
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 5,
                            DiscountPrice = 39000m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Name = "Gyoza",
                            Price = 42000m,
                            Unit = "Piece (5pcs)"
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 3,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Name = "Veggie Burger",
                            Price = 70000m,
                            Unit = "Piece (1pc)"
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 5,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Name = "Spring Rolls",
                            Price = 30000m,
                            Unit = "Piece (3pcs)"
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Name = "Takoyaki",
                            Price = 48000m,
                            Unit = "Piece (6pcs)"
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 6,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000023"),
                            Name = "Tea",
                            Price = 15000m,
                            Unit = "Cup"
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000024"),
                            Name = "Seafood Pho",
                            Price = 60000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000025"),
                            Name = "Steamed Rice Roll",
                            Price = 30000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 6,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000026"),
                            Name = "Espresso",
                            Price = 30000m,
                            Unit = "Cup"
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 4,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000027"),
                            Name = "Yakitori",
                            Price = 52000m,
                            Unit = "Piece (3pcs)"
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 6,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000028"),
                            Name = "Smoothie",
                            Price = 35000m,
                            Unit = "Glass"
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000029"),
                            Name = "Pad Thai",
                            Price = 55000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000030"),
                            Name = "Udon",
                            Price = 70000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Name = "Spaghetti Carbonara",
                            Price = 75000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000032"),
                            Name = "Ramen",
                            Price = 65000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 1,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000033"),
                            Name = "Chicken Biryani",
                            Price = 65000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 6,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000034"),
                            Name = "Coconut Water",
                            Price = 20000m,
                            Unit = "Glass"
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 6,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000035"),
                            Name = "Lemonade",
                            Price = 25000m,
                            Unit = "Glass"
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 4,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000036"),
                            Name = "Chicken Satay",
                            Price = 45000m,
                            Unit = "Piece (4pcs)"
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 6,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000037"),
                            Name = "Milkshake",
                            Price = 40000m,
                            Unit = "Glass"
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 3,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000038"),
                            Name = "Bulgogi",
                            Price = 85000m,
                            Unit = "Plate"
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000039"),
                            Name = "Soba Noodles",
                            Price = 50000m,
                            Unit = "Bowl"
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 2,
                            DiscountPrice = 0m,
                            ImageId = new Guid("00000000-0000-0000-0000-000000000040"),
                            Name = "Laksa",
                            Price = 58000m,
                            Unit = "Bowl"
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("TableId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ZoneId" }, "ZoneId");

                    b.ToTable("Table", (string)null);

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Number = 1,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 2,
                            Number = 2,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 3,
                            Number = 3,
                            SeatsCount = 8,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 4,
                            Number = 4,
                            SeatsCount = 6,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 5,
                            Number = 1,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 6,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 7,
                            Number = 3,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 8,
                            Number = 4,
                            SeatsCount = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            TableId = 9,
                            Number = 1,
                            SeatsCount = 3,
                            ZoneId = 3
                        },
                        new
                        {
                            TableId = 10,
                            Number = 2,
                            SeatsCount = 2,
                            ZoneId = 3
                        },
                        new
                        {
                            TableId = 11,
                            Number = 5,
                            SeatsCount = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            TableId = 12,
                            Number = 3,
                            SeatsCount = 5,
                            ZoneId = 3
                        });
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("Zone", (string)null);

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            Name = "Inside"
                        },
                        new
                        {
                            ZoneId = 2,
                            Name = "Backyard"
                        },
                        new
                        {
                            ZoneId = 3,
                            Name = "Outside"
                        },
                        new
                        {
                            ZoneId = 4,
                            Name = "VIP"
                        },
                        new
                        {
                            ZoneId = 5,
                            Name = "Front"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Cashier",
                            NormalizedName = "CASHIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BistroQ.Core.Entities.AppUser", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("User")
                        .HasForeignKey("BistroQ.Core.Entities.AppUser", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_2");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.NutritionFact", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithOne("NutritionFact")
                        .HasForeignKey("BistroQ.Core.Entities.NutritionFact", "ProductId")
                        .IsRequired()
                        .HasConstraintName("NutritionFact_ibfk_1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Table", "Table")
                        .WithOne("Order")
                        .HasForeignKey("BistroQ.Core.Entities.Order", "TableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_ibfk_1");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("OrderItem_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_1");

                    b.HasOne("BistroQ.Core.Entities.Image", "Image")
                        .WithOne("Product")
                        .HasForeignKey("BistroQ.Core.Entities.Product", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_ibfk_2");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.Zone", "Zone")
                        .WithMany("Tables")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Table_ibfk_1");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BistroQ.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Image", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Product", b =>
                {
                    b.Navigation("NutritionFact");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Table", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BistroQ.Core.Entities.Zone", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
